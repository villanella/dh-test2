openapi: 3.0.0
info:
  title: User Management API
  description: Пример API для управления пользователями
  version: 1.0.0
servers:
  - url: http://api.example.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Local development server
paths:
  /users:
    get:
      summary: Получить список пользователей
      description: Возвращает список пользователей с пагинацией
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Номер страницы
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Количество элементов на странице
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      summary: Создать нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
        - createdAt

    UsersListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        page:
          type: integer
        total:
          type: integer

    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
        email:
          type: string
          format: email
      required:
        - name
        - email

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'

  responses:
    BadRequest:
      description: Неверный запрос
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    ServerError:
      description: Ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
          required:
            - code
            - message

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

